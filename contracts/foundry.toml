[profile.default]
src = "src"
out = "out"
libs = ["lib"]
test = "test"
cache_path = "cache"

# Solidity version
solc_version = "0.8.20"

# Optimizer settings
optimizer = true
optimizer_runs = 200

# Test settings
verbosity = 2
fuzz_runs = 1000

# Gas reporting
gas_reports = ["*"]

# Remappings for dependencies
remappings = [
    "@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/src/v0.8/",
    "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/"
]

# EVM version
evm_version = "london"

# Additional compiler settings
via_ir = true
bytecode_hash = "none"
cbor_metadata = false

# Security and linting enhancements
[profile.default.model_checker]
contracts = { "src/PepedawnRaffle.sol" = ["PepedawnRaffle"] }
engine = "chc"
timeout = 20000
targets = ["assert", "underflow", "overflow", "divByZero", "constantCondition", "popEmptyArray", "outOfBounds"]

# Enhanced security warnings
extra_output = ["storageLayout", "devdoc", "userdoc"]
extra_output_files = ["storageLayout", "devdoc", "userdoc"]

# Strict compilation settings for security
deny_warnings = true
ignored_error_codes = []

# Security-focused compiler settings
[profile.security-analysis]
optimizer = false  # Disable optimizer for security analysis
optimizer_runs = 1
verbosity = 3
fuzz_runs = 10000
invariant_runs = 1000
invariant_depth = 100

# Test Profiles for Different Scenarios

# === FAST PRE-COMMIT SUITE (New!) ===
[profile.pre-commit]
# Fast tests for pre-commit hook (<5 seconds)
test_pattern = "test/{Core,RoundLifecycle,BettingAndProofs}.t.sol"
fuzz_runs = 100        # Minimal fuzzing for speed
verbosity = 1          # Quiet output
gas_reports = []       # No gas reports

# === UNIT TESTS (Primary Development) ===
[profile.unit]
# Comprehensive unit tests - All core functionality
test_pattern = "test/{Core,RoundLifecycle,BettingAndProofs,WinnerSelection,Security,Governance}.t.sol"
fuzz_runs = 1000
verbosity = 2

# === INTEGRATION TESTS (Full Workflow) ===
[profile.integration]
# End-to-end integration tests with VRF mocks
test_pattern = "test/Integration.t.sol"
fuzz_runs = 5000
verbosity = 2

# === CI/CD PIPELINE ===
[profile.ci]
# Fast, reliable tests for CI/CD (unit tests only)
test_pattern = "test/{Core,RoundLifecycle,BettingAndProofs,WinnerSelection,Security,Governance}.t.sol"
fuzz_runs = 1000
verbosity = 1

# === SECURITY TESTING ===
[profile.security]
# Security-focused with extensive fuzzing
test_pattern = "test/{Security,Governance}.t.sol"
fuzz_runs = 10000
invariant_runs = 1000
invariant_depth = 100

# === ALL NEW TESTS ===
[profile.all]
# Run all new test files (unit + integration)
test_pattern = "test/{Core,RoundLifecycle,BettingAndProofs,WinnerSelection,Security,Governance,Integration}.t.sol"
verbosity = 2

# === NETWORK-SPECIFIC TESTS ===
[profile.deployed]
# Live network tests - Requires deployed contract on Sepolia
test_pattern = "test/DeployedContractTest.t.sol"
fork_url = "${SEPOLIA_RPC_URL}"
verbosity = 3

# === DEPLOYMENT PROFILE (Simplified for easier verification) ===
[profile.deploy]
# Simplified settings for easier Etherscan verification
# Use: forge script scripts/forge/Deploy.s.sol --profile deploy --rpc-url $SEPOLIA_RPC_URL --broadcast --verify
optimizer = true
optimizer_runs = 200
# Disable advanced features that complicate verification
via_ir = false
bytecode_hash = "ipfs"  # Standard setting for Etherscan
cbor_metadata = true    # Standard setting for Etherscan
evm_version = "london"

[fmt]
line_length = 100
tab_width = 4
bracket_spacing = false
